#!/usr/bin/env python
"""
Usage: jam [--version] [--help] [--config=PATH] <command> [<args>...]

Options:
  -h, --help  Show this screen.
  -v, --version  Show version.
  -c, --config=FILE  The config file to load.

Commands:
   regenerate    Regenerate a namespace or the manager
   server        Run the JamDB server
   token         Generate a JWT to authenticate to JamDB
   list          List all namespaces
   create        Create a new namespace, collection, or document
   info          Get info for a namepsace or collection
   update        Update a namespace's attributes
   delete        Delete a namespace, collection, or document

See 'jam help <command>' for more information on a specific command.

"""
import sys
import json
from docopt import docopt

import jam
import jam.auth
import jam.server
import jam.settings

__version__ = 'jam {}'.format(jam.__version__)


def command(func):
    def inner(argv):
        return func(
            docopt(func.__doc__, version=__version__, argv=argv),
            argv
        )
    return inner


@command
def jam_regenerate(args, argv):
    """
    Usage: jam regenerate [<namespace> [<collection>]]

    Regenerates the jam namespace manager.
    If a namespace is given, the namespace will be regenerated
    """
    if args['<collection>']:
        if args['<collection>'] == '*':
            for collection in jam.NamespaceManager().get_namespace(args['<namespace>']).keys():
                jam.NamespaceManager().get_namespace(args['<namespace>']).get_collection(collection).regenerate()
        else:
            jam.NamespaceManager().get_namespace(args['<namespace>']).get_collection(args['<collection>']).regenerate()
    elif args['<namespace>']:
        if args['<namespace>'] == '*':
            for namespace in jam.NamespaceManager().keys():
                jam.NamespaceManager().get_namespace(namespace).regenerate()
        else:
            return jam.NamespaceManager().get_namespace(args['<namespace>']).regenerate()
    else:
        jam.NamespaceManager().regenerate()


@command
def jam_list(args, argv):
    """
    Usage: jam list [<namespace> [<collection>]]
    """
    subj = jam.NamespaceManager()
    if args['<namespace>']:
        subj = subj.get_namespace(args['<namespace>'])
    if args['<collection>']:
        subj = subj.get_collection(args['<collection>'])

    print('\n'.join(subj.keys()))


@command
def jam_userify(args, argv):
    """
    Usage: jam userify <namespace> <collection> [--user=USER] [--no-created-is-owner]

    Attaches a json schema that allows the given collection to be used for authentication.

    Options:
        -u, --user=USER  The user to perform this update as [default: system-system-system]
        -n, --no-created-is-owner  Don't set the createdIsOwner flag
    """
    ns = jam.NamespaceManager().get_namespace(args['<namespace>'])
    ns.update(args['<collection>'], [{
        'op': 'add', 'path': '/schema', 'value': {
            'type': 'jsonschema',
            'schema': {
                'id': '/',
                'type': 'object',
                'properties': {
                    'password': {
                        'id': 'password',
                        'type': 'string',
                        'pattern': '^\$2b\$1[0-3]\$\S{53}$'
                    },
                },
                'required': ['password']
            }
        }
    }, {
        'op': 'add',
        'path': '/plugins/user',
        'value': {
            'createdIsOwner': not args['--no-created-is-owner']
        }
    }], args['--user'])


@command
def jam_create(args, argv):
    """
    Usage: jam create <namespace> [<collection> [<document> --force]] [--creator=USERID]

    Options:
        -c, --creator=USERID  The user id for the creator [default: system-system-system]
        -f, --force  If a namespace/collection/document already exists with the given key replace the existing
    """
    if args['<document>']:
        data = json.loads(sys.stdin.read())
        jam.NamespaceManager().get_namespace(args['<namespace>']).get_collection(args['<collection>']).create(args['<document>'], data, args['--creator'])
    elif args['<collection>']:
        jam.NamespaceManager().get_namespace(args['<namespace>']).create_collection(args['<collection>'], args['--creator'])
    else:
        jam.NamespaceManager().create_namespace(args['<namespace>'], args['--creator'])


@command
def jam_info(args, argv):
    """
    Usage: jam info <namespace> [<collection>]
    """
    if args['<collection>']:
        doc = jam.NamespaceManager().get_namespace(args['<namespace>']).read(args['<collection>'])
    else:
        doc = jam.NamespaceManager().read(args['<namespace>'])
    print('Name: ', doc.ref)
    print('Creator: ', doc.created_by)
    print('Schema:\n', json.dumps(doc.data.get('schema'), indent=4))
    print('Last Modifed By: ', doc.modified_by)
    print('Permissions:\n', '\n'.join(['\t{}: {!r}'.format(k, jam.auth.Permissions(v)) for (k, v) in doc.data['permissions'].items()]))


@command
def jam_update(args, argv):
    """
    Usage: jam update <namespace> [--user=USER] [--rename=NAME] [--delete-permissions=<remove-id>...] [--permissions=<add-id>...]
           jam update <namespace> <collection> [--schema=PATH] [--user=USER] [--rename=NAME] [--delete-permissions=<remove-id>...] [--permissions=<add-id>...]

    Options:
        -p, --permissions=UID  Permissions to update in the form of <user-id> <permission as int>
        -r, --rename=NAME  Rename namespace to NAME
        -u, --user=USER  The user to perform this update as [default: system-system-system]
        -d, --delete-permissions=UID  Delete the permissions for ID
        -s, --schema=PATH  Path to a json file containing a jsonschema
    """
    if args['<collection>']:
        key = args['<collection>']
        resource = jam.NamespaceManager().get_namespace(args['<namespace>'])
    else:
        key = args['<namespace>']
        resource = jam.NamespaceManager()

    if args['--permissions']:
        resource.update(key, [
            {'op': 'add', 'path': '/permissions/{}'.format(uid), 'value': p.upper()}
            for (uid, p) in [perm.split(' ') for perm in args['--permissions']]
        ], args['--user'])

    if args['--delete-permissions']:
        resource.update(key, [
            {'op': 'remove', 'path': '/permissions/{}'.format(uid)}
            for uid in args['--delete-permissions']
        ], args['--user'])

    if args['--schema']:
        with open(args['--schema'], 'r') as schema:
            resource.update(key, [{
                'op': 'add',
                'path': '/schema',
                'value': {
                    'type': 'jsonschema',
                    'schema': json.load(schema)
                }
            }], args['--user'])


@command
def jam_delete(args, argv):
    """
    Usage: jam delete <namespace> [<collection> [<document>]] [--creator=USERID]

    Options:
        -c, --creator=USERID  The user id for the deleter [default: system-system-system]
    """
    if args['<document>']:
        jam.NamespaceManager().get_namespace(args['<namespace>']).get_collection(args['<collection>']).delete(args['<document>'], args['--creator'])
    elif args['<collection>']:
        jam.NamespaceManager().get_namespace(args['<namespace>']).delete(args['<collection>'], args['--creator'])
    else:
        jam.NamespaceManager().delete(args['<namespace>'], args['--creator'])


@command
def jam_server(args, argv):
    """
    Usage: jam server [--port=PORT] [--debug] [--host=HOST] [--fork]

    Options:
        -f, --fork  Fork the server
        -d, --debug  Run in debug mode
        -p, --port=PORT  The port to bind to [default: 1212]
        -h, --host=HOST  The host to bind to [default: 127.0.0.1]
    """
    del args['server']
    jam.settings.update({
        key.lstrip('-').upper(): val
        for key, val in args.items()
        if key in argv
    })
    jam.server.main()


@command
def jam_token(args, argv):
    """
    Usage: jam token <user> [--exp=TIME]

    User is formatted as {type}-{provider}-{id}

    Options:
        -e, --exp=TIME  The time, in hours, for the token to last for [default: 1]
    """
    if len(args['<user>'].split('-')) != 3:
        return print('Invalid user id "{}"\nSee jam token --help for more info'.format(args['<user>']))
    print(jam.auth.User.create(*args['<user>'].split('-'), exp=int(args['--exp'])).token.decode('utf-8'))


@command
def jam_help(args, argv):
    """
    Usage: jam help <command>
    """
    print('todo')


def main():
    args = docopt(__doc__, version=__version__, options_first=True)
    from jam import settings
    if args['--config']:
        print('Loading settings from {}'.format(args['--config']))
        settings.load(args['--config'])
    try:
        return {
            'create': jam_create,
            'delete': jam_delete,
            'info': jam_info,
            'help': jam_help,
            'list': jam_list,
            'token': jam_token,
            'server': jam_server,
            'update': jam_update,
            'userify': jam_userify,
            'regen': jam_regenerate,
            'regenerate': jam_regenerate,
        }[args['<command>']]([args['<command>']] + args['<args>'])
    except KeyError:
        print('Invalid command "{}"'.format(args['<command>']))


if __name__ == '__main__':
    main()
